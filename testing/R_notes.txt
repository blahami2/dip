install.packages("data.table") # first time only
library(data.table) # imports library
data <- fread("../usability tests/p1_ab_torque.log", select = c("ClosestWorldIntersection.objectName")) # loads using c("column_name1", "column_name2", ...)
data # prints loaded data
data[data!="tablet"] <- 0  # maps non-tablet strings to 0
data[data=="tablet"] <- 1  # maps tablet strings to 1 (perform AFTER the first one - or else 1 is NOT "tablet")
data$column_name <- as.numeric(data$column_name) # remaps column column_name to numeric values
names(data)[names(data)=="column_name"] <- "new_column_name" # renames column
axis(1, seq(0,length(data$column_name),1000)) # labels axis x
barplot(data$column_name, xlim = c(0, length(data$column_name))) # bar plot with limits
dev.new() # new plot window
dev.prev() # previous plot window
dev.next() # next plot window
dev.set(window_id) # make window with id window_id active (displayed number next to Device)
rm(data) # clear object data
gc()     # force garbage collector

# script  
rm(data) 
rm(dataT) 
rm(dataCD)
gc()

dev.set(2)
data <- fread("../usability tests/p4_m_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data[data!="phone"] <- 0
data[data=="phone"] <- 1
names(data)[names(data)=="ClosestWorldIntersection.objectName"] <- "Tablet"
data$Tablet <- as.numeric(data$Tablet)
barplot(data$Tablet)
ratio = sum(data$Tablet) / length(data$Tablet)
max = 0
counter = 0
for(i in 1:length(data$Tablet)){
  val = data$Tablet[[i]]
  if(val == 0){
    if(max < counter){
      max = counter
    }
    counter = 0  
  } else {
    counter = counter + 1
  }
}
sprintf("App glance ratio: %f %%", ratio * 100)
sprintf("Maximal glance time: %d ms", max * 1000 / 60)


dev.set(3)
data <- fread("../usability tests/p2_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data[data!="tablet"] <- 0
data[data=="tablet"] <- 1
names(data)[names(data)=="ClosestWorldIntersection.objectName"] <- "Tablet"
data$Tablet <- as.numeric(data$Tablet)
barplot(data$Tablet)
ratio = sum(data$Tablet) / length(data$Tablet)
max = 0
counter = 0
for(i in 1:length(data$Tablet)){
  val = data$Tablet[[i]]
  if(val == 0){
    if(max < counter){
      max = counter
    }
    counter = 0  
  } else {
    counter = counter + 1
  }
}
sprintf("App glance ratio: %f %%", ratio * 100)
sprintf("Maximal glance time: %d ms", max * 1000 / 60)

glanceList <- c()
counter = 0
for(i in 1:length(data$Tablet)){
  val = data$Tablet[[i]]
  if(val == 0){
    if(counter > 0){  
      glanceList <- c(glanceList, counter * 4)
      counter = 0 
    } 
  } else {
    counter = counter + 1
  }
}
if(counter > 0){
  glanceList <- c(counter, glanceList)
}

barplot(glanceList)

sprintf("App glance ratio: %f %%", ratio * 100)
sprintf("Maximal glance time: %d ms", max * 1000 / 60)


#determine distribution
xMean = mean(glanceList) # mean value
xSd = sd(glanceList)     # spread value
a = xMean - sqrt(0.25)
b = a + xSd * sqrt(11.75)
hist(glanceList, prob = 1)
xWidth=max(glanceList) - min(glanceList)
xGrid=seq(min(glanceList) - 0.2 * xWidth, max(glanceList) + 0.2 * xWidth, length = 30)
lines (xGrid,dnorm(xGrid, mean = xMean, sd = xSd), col = 'red', lw = 2, lty = 2)
lines (xGrid,dunif(xGrid, min = a, max = b), col = 'blue', lw = 2, lty = 2)
lines (xGrid,dexp(xGrid, rate = 1 / xMean), col = 'green', lw = 2, lty = 2)

# confidence interval
t.test(glanceList)
t.test(glanceList, alternative="greater") # chance the glance time will be greater


# barplot with all the data

#Torque
data1 <- fread("../usability tests/p1_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data2 <- fread("../usability tests/p2_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data3 <- fread("../usability tests/p1_m_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data4 <- fread("../usability tests/p4_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data5 <- fread("../usability tests/p5_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))

#Torque
data <- list()
data[[1]] <- fread("../usability tests/p1_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data[[2]] <- fread("../usability tests/p2_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data[[3]] <- fread("../usability tests/p1_m_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data[[4]] <- fread("../usability tests/p4_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))
data[[5]] <- fread("../usability tests/p5_t_ab_torque.log", select = c("ClosestWorldIntersection.objectName"))

#CarDashboard
data <- list()
data[[1]] <- fread("../usability tests/p1_t_ab_cd.log", select = c("ClosestWorldIntersection.objectName"))
data[[2]] <- fread("../usability tests/p4_m_ab_cd.log", select = c("ClosestWorldIntersection.objectName"))
data[[3]] <- fread("../usability tests/p3_t_ab_cd.log", select = c("ClosestWorldIntersection.objectName"))
data[[4]] <- fread("../usability tests/p4_t_ab_cd.log", select = c("ClosestWorldIntersection.objectName"))
data[[5]] <- fread("../usability tests/p5_t_ab_cd.log", select = c("ClosestWorldIntersection.objectName"))

for(i in 1:5){
  data[[i]][data[[i]]!="tablet"] <- 0
  data[[i]][data[[i]]=="tablet"] <- 1
  names(data[[i]])[names(data[[i]])=="ClosestWorldIntersection.objectName"] <- "Tablet"
  data[[i]]$Tablet <- as.numeric(data[[i]]$Tablet)
}

addedData <- c()
for(i in 5000:10000){
  counter = 0
  for(j in 1:5){
    counter = counter + data[[j]]$Tablet[[i]]
  }
  addedData <- c(addedData, counter)  
}
barplot(addedData)
axis(1)

eval <- list(c(),c())
for(j in 1:5){
  ratio = sum(data[[j]]$Tablet) / length(data[[j]]$Tablet)
  max = 0
  counter = 0
  for(i in 1:length(data[[j]]$Tablet)){
    val = data[[j]]$Tablet[[i]]
    if(val == 0){
      if(max < counter){
        max = counter
      }
      counter = 0  
    } else {
      counter = counter + 1
    }
  }
  eval[[1]] <- c(ratio * 100, eval[[1]])
  eval[[2]] <- c(max * 1000 / 60, eval[[2]])
  print(ratio * 100)
  print(max * 1000 / 60)
}
mean(eval[[1]])
sd(eval[[1]])
mean(eval[[2]])
sd(eval[[2]])

glanceLength = 0
glanceSum = 0
for(j in 1:5){
  glanceLength = glanceLength + length(data[[j]]$Tablet)
  glanceSum = glanceSum + sum(data[[j]]$Tablet)
}
print(100 * glanceSum / glanceLength)


glanceList <- c()
counter = 0
for(j in 1:5){
  for(i in 1:length(data[[j]]$Tablet)){
    val = data[[j]]$Tablet[[i]]
    if(val == 0){
      if(counter > 0){  
        glanceList <- c(glanceList, counter * 1000 / 60)
        counter = 0 
      } 
    } else {
      counter = counter + 1
    }
  }
}
if(counter > 0){
  glanceList <- c(glanceList, counter * 1000 / 60)
}

#determine distribution
xMean = mean(glanceList) # mean value
xSd = sd(glanceList)     # spread value
a = xMean - sqrt(0.25)
b = a + xSd * sqrt(11.75)
hist(glanceList, prob = 1)
xWidth=max(glanceList) - min(glanceList)
xGrid=seq(min(glanceList) - 0.2 * xWidth, max(glanceList) + 0.2 * xWidth, length = 30)
lines (xGrid,dnorm(xGrid, mean = xMean, sd = xSd), col = 'red', lw = 2, lty = 2)
lines (xGrid,dunif(xGrid, min = a, max = b), col = 'blue', lw = 2, lty = 2)
lines (xGrid,dexp(xGrid, rate = 1 / xMean), col = 'green', lw = 2, lty = 2)

# confidence interval
t.test(glanceList, conf.level=0.99)
t.test(glanceList, alternative="less", conf.level=0.99) # chance the glance time will be greater


data1[data1!="tablet"] <- 0 
data2[data2!="tablet"] <- 0 
data3[data3!="tablet"] <- 0 
data4[data4!="tablet"] <- 0 
data5[data5!="tablet"] <- 0 
data1[data1=="tablet"] <- 1 
data2[data2=="tablet"] <- 1 
data3[data3=="tablet"] <- 1 
data4[data4=="tablet"] <- 1 
data5[data5=="tablet"] <- 1 

names(data1)[names(data1)=="ClosestWorldIntersection.objectName"] <- "Tablet"
names(data2)[names(data2)=="ClosestWorldIntersection.objectName"] <- "Tablet"
names(data3)[names(data3)=="ClosestWorldIntersection.objectName"] <- "Tablet"
names(data4)[names(data4)=="ClosestWorldIntersection.objectName"] <- "Tablet"
names(data5)[names(data5)=="ClosestWorldIntersection.objectName"] <- "Tablet"

data1$Tablet <- as.numeric(data1$Tablet)
data2$Tablet <- as.numeric(data2$Tablet)
data3$Tablet <- as.numeric(data3$Tablet)
data4$Tablet <- as.numeric(data4$Tablet)
data5$Tablet <- as.numeric(data5$Tablet)

addedData <- c()
for(i in 5000:10000){
  addedData <- c(data, data1$Tablet[[i]] + data3$Tablet[[i]] +data4$Tablet[[i]]+ data5$Tablet[[i]])  
}
barplot(data)
axis(1)

# CLT tests

library("plotrix")
> draw.circle(-5239.3,2292,35,nv=1000)
> draw.circle(-5239.3,2292,35,nv=10000)
> lines(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325))
> plot.new()
> lines(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325))
> plot(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325), type="n")
> lines(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325))
> draw.circle(-5239.3,2292,35,nv=10000)
> rect(-5239.3 - 1.1,2292 - 1.1, -5239.3 + 1.1, 2292 + 1.1) 
> plot(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325), type="n")
> lines(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325), type="l")
> lines(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325), type="o")
> plot(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325))
> plot(data1$V3, data1$V5, xlim=c(-5280,-5230), ylim=c(2275,2325))


# plot graph with a circle obstacle, edit in photoshop
plot(data1$V3, data1$V5, xlim=c(-5239.3-35,-5239.3+5), ylim=c(2285,2305))
draw.circle(-5239.3,2292,1.1,nv=10000)
 
# plot all in one
data <- list()
data[[1]] <- fread("../cardashboard/p1_t_clt.txt", select = c(3,5))
data[[2]] <- fread("../cardashboard/p2_t_clt.txt", select = c(3,5))
data[[3]] <- fread("../cardashboard/p3_m_clt.txt", select = c(3,5))
data[[4]] <- fread("../cardashboard/p4_t_clt.txt", select = c(3,5))
data[[5]] <- fread("../cardashboard/p5_m_clt.txt", select = c(3,5))

for(i in 1:5){
  data[[i]]$V5 <- (-1) * data[[i]]$V5
}
dataOpt <- list(c(),c())
dataOpt[[1]] <- data[[1]]$V3 - 1
dataOpt[[2]] <- data[[1]]$V5 - 1

xl = c(-5239.3-35,-5239.3+10)
yl = c(2293,2296)
plot(data[[1]]$V3, data[[1]]$V5, xlim=xl, ylim=yl, type="n")
draw.circle(-5239.3,2292,1.1,nv=10000)
lines(data[[1]]$V3, data[[1]]$V5, xlim=xl, ylim=yl, type="l", col = 'black')
lines(data[[2]]$V3, data[[2]]$V5, xlim=xl, ylim=yl, type="l", col = 'red')
lines(data[[3]]$V3, data[[3]]$V5, xlim=xl, ylim=yl, type="l", col = 'blue')
lines(data[[4]]$V3, data[[4]]$V5, xlim=xl, ylim=yl, type="l", col = 'green')
lines(data[[5]]$V3, data[[5]]$V5, xlim=xl, ylim=yl, type="l", col = 'yellow')

startX <- c()
startY <- c()

angles <- list(c(),c(),c(),c(),c())
xpoints <- list(c(),c(),c(),c(),c())
ypoints <- list(c(),c(),c(),c(),c())

for(column in 1:5){
  printedA = 0
  printedB = 0
  xlimA = 0
  xlimB = 0
  for(i in 1:length(data[[column]]$V3)){
    if(printedA == 0){
      if(data[[column]]$V3[[i]] >= (-5239.3-35)){
        print(i)
        xlimA = i
        printedA = 1
      }
    } else {
      if(printedB == 0){
        if(data[[column]]$V3[[i]] >= (-5239.3)){
          print(i)
          xlimB = i
          printedB = 1
        }
      } else {
        break
      }
    }
  }

  space = 0.1
  xCoord = 0
  x1 = 0
  x2 = 0
  x3 = 0
  y1 = 0
  y2 = 0
  y3 = 0
  for(i in xlimA:xlimB){
    if(xCoord == 0){
      x1 = data[[column]]$V3[[i]]
      y1 = data[[column]]$V5[[i]]
      xCoord = x1
      xpoints[[column]] <- c(xpoints[[column]], x1)
      ypoints[[column]] <- c(ypoints[[column]], y1)
    } else {
      xCoord2 = data[[column]]$V3[[i]]
      if(abs(xCoord - xCoord2) < space){
      } else {
        if(x2 != 0){
          x3 = data[[column]]$V3[[i]]
          y3 = data[[column]]$V5[[i]]
          xCoord = x3
          xpoints[[column]] <- c(xpoints[[column]], x3)
          ypoints[[column]] <- c(ypoints[[column]], y3)
          ux = x2 - x1
          uy = y2 - y1
          vx = x3 - x2
          vy = y3 - y2
          top = ux * vx + uy * vy
          bot = sqrt(ux * ux + uy * uy) * sqrt(vx * vx + vy * vy)
          angles[[column]] <- c(angles[[column]], acos(top/bot)*180/pi)
          x1 = x2
          y1 = y2
          x2 = x3
          y2 = y3
        } else {
          x2 = data[[column]]$V3[[i]]
          y2 = data[[column]]$V5[[i]]
          xCoord = x2
          xpoints[[column]] <- c(xpoints[[column]], x2)
          ypoints[[column]] <- c(ypoints[[column]], y2)
        }
      }
    }
  }


  angles[[column]][is.nan(angles[[column]])] <- 0

  for(i in 1:length(angles[[column]])){
    if(angles[[column]][[i]] > 0.2){
      print(xpoints[[column]][[i+1]])
      print(ypoints[[column]][[i+1]])
      print(i)
      startX <- c(startX, xpoints[[column]][[i+1]])
      startY <- c(startY, ypoints[[column]][[i+1]])
      break
    }
  }
}


plot(data[[column]]$V3, data[[column]]$V5, xlim=c(-5239.3-35,-5239.3))


# background
plot(c(0,45), c(0,20), xlab="x[m]", ylab="y[m]")
 
